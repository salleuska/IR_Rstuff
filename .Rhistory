list(values = out, prob.acc = accepted/N )
}
res.is <- post.is(N=10^4, par0=hatparam, data = gam.y, a1, a2, b1, b2)
res.is$prob.acc
mle <- nlm(function(param) -nlogl(param, gam.y), p=c(2, 2),  hessian = T)
mle <- nlm(function(param) -nlogl(param, gam.y), p=c(2, 2),  hessian = T)
hatparam <- mle$estimate
Jinv <- solve(mle$hessian)
stress
logL <- function(par, data)
{
m = exp(par[1] + par[2]*data$x)
sum(dpois(data$y, lambda = m, log = TRUE))
}
load("/media/sally/STORE N GO/Statistica Computazionale/Esami/compiti2010/Scp-30062010.RData")
stress
logL <- function(par, data)
{
m = exp(par[1] + par[2]*data$x)
sum(dpois(data$y, lambda = m, log = TRUE))
}
lposterior <- function(par, data) logL(par, data)
# Simuliamo dalla posteriori tramite un alogritmo Metropolis-Hastings con passeggiata casuale uniforme
post.mcmc <- function(R, eps, par0)
{
d <- length(par0)
accepted <- numeric(d)
out <- array(0, dim = c(R, d))
par <- par0
for(i in 1:R)
{
for(j in 1:d)
{
pars <- par
pars[j] <- par[j] + runif(1, -eps[j], eps[j])
alpha <- min(1, exp(lposterior(pars, stress) - lposterior(par, stress)))
if(runif(1) < alpha)
{
accepted[j] <- accepted[j] + 1
par[j] <- pars[j]
}
}
out[i, ] <- par
}
list(values = out, accepted = accepted/N)
}
# Scelta eps --> posso farmi un grafico della verosimiglianza
R <- 10^4
b <- 1000 #burnin
# prova con valori bassi
eps <- c(0.3,0.030)
res <-post.mcmc(R,  eps, par0 =  c(0,0))
res$accepted
# Varie prove
# Prima magari guardare i grafici di tutti i valori simulati, e poi decidere il burnin
par(mfrow = c(2,2))
for(i in 1:2)
{
plot(res$values[,i], type = "l")
lines(cumsum(res$values[,i])/(1:(R-b+1)),col=2)
title(paste("eps=", eps[i] , " (acc = ", res$accepted[i], ")", sep = "" ))
acf(res$values[,i], main = paste("eps=", eps[i] , " (acc = ", res$accepted[i], ")", sep = "" ))
}
mle <- nlm(function(x) -lposterior(x, data = stress), c(0.3,0.4), hessian = T)
warnings()
mle$estimate
mle$minimum
se <- sqrt(diag(solve(mle$hessian)))
beta1.val <- seq(mle$estimate[1] - 4*se[1],mle$estimate[1] + 4*se[1], length = 100 )
beta2.val <- seq(mle$estimate[2] - 4*se[2],mle$estimate[2] + 4*se[2], length = 100 )
par.values <- expand.grid(beta1.val, beta2.val)
postvalues <- apply(par.values, 1, lposterior, data = stress)
postvalues <- matrix(postvalues, nrow = length(beta1.val), ncol = length(beta2.val), byrow = FALSE)
conf.levels <- c(0.5,0.75,0.90, 0.95, 0.99)
contour(beta1.val, beta2.val, postvalues - max(postvalues), xlab = "beta0", ylab = "beta1",
levels = -qchisq(conf.levels, df = 2)/2, labels = "", drawlabels = FALSE, col = 2)
#####################################################
plot(res$values[b:R, ]) # per l'esame bastava il plot
contour(beta1.val, beta2.val, postvalues - max(postvalues), xlab = "beta0", ylab = "beta1",
levels = -qchisq(conf.levels, df = 2)/2, labels = "", drawlabels = FALSE, col = 2, add = T)
###############################################
# Grafico correlazioni tra b0 e b1
# uso i valori generati
plot(res$values[b:R, 1], res$values[b:R, 2])
cor(res$values[b:R, 1], res$values[b:R, 2])
par(mfrow = c(1,1))
hist(exp(res$values[b:R, 1] + res$values[b:R, 2]*19), prob = T, breaks = 50)
mean(exp(res$values[b:R, 1] + res$values[b:R, 2]*19))
#################################################
# Intervalli di credibilitÃ 
# per beta0, beta1, psi al 95%
library(TeachingDemos)
emp.hpd(res$values[b:R, 1], conf = 0.95)
emp.hpd(res$values[b:R, 2], conf = 0.95)
emp.hpd(exp(res$values[b:R, 1] + res$values[b:R, 2]*19), conf = 0.95)
#################################################
# Calcolo numerico della stima di massima verosimiglianza
(1.1*1.4)^0.5
`heidel_details&precision` <- read.table("~/Scrivania/TipsterData/esiti 1989/heidel_details&precision", header=T, quote="\"")
View(`heidel_details&precision`)
heidel.dp <- read.table("~/Scrivania/TipsterData/esiti 1989/heidel_details&precision", header=T, quote="\"")
rm(heidel_details&precision)
data <- heidel.dp
print(unique(data$value[data$type == "DATE"]))
data[(as.integer(data$value)>2000), ]
print(unique(data$value[data$type == "DATE"]))
data[(as.integer(data$value[data$type == "DATE"])>2000), ]
(as.integer(data$value[data$type == "DATE"])
)
cbind(data$value[data$type == "DATE"], as.integer(data$value[data$type == "DATE"])[1:10, ]
)
cbind(data$value[data$type == "DATE"], as.integer(data$value[data$type == "DATE"]))[1:10, ]
cbind(data$value[data$type == "DATE"], as.integer(data$value[data$type == "DATE"]))[1:1000, ]
length(unique(data$value[data$type == "DATE"]))
cbind(unique(data$value[data$type == "DATE"]), as.integer(unique(data$value[data$type == "DATE"])))[1:1000, ]
anni <- cbind(unique(data$value[data$type == "DATE"]), as.integer(unique(data$value[data$type == "DATE"])))
length(unique(data$value[data$type == "DATE"]))
anni
anni <- as.integer(unique(data$value[data$type == "DATE"]))
length(sum(anni > 2000))
(anni > 2000)
sum(anni > 2000)
sum(anni > 2010)
sum(anni > 2020)
for(i in 1:50)
{
print(data[data$value ==levels(data$value)[i], ])
}
info <- function(data.temp)
{
# data.temp <- vettore espressioni temporali dai dati (come variabili fattoriali)
t.espr <- levels(data.temp)
out <- list(list())
for(i in 1:length(t.espr))
{
freq <- dim(data[which(data.temp == t.espr[i]), ])[1]
terms <- unique(as.character(data$term[which(data.temp == t.espr[i])]))
out[[t.espr[i]]] <- list(terms = terms, freq = freq)
}
out
}
prova <- info(data$value)
str(prova)
prova[[18]]
get(prova)
get("prova")
get(freq, "prova")
get("freq", prova)
get("00", prova)
str(get("prova"))
get("prova")[1:2]
get("prova")[1:10]
get("prova")[100;200]
get("prova")[100:200]
prova[1:10]
lapply(prova[1:10], write, "test.txt", append=TRUE, ncolumns=1000)
lapply(prova[1:10], cat, "test.txt", append=TRUE, ncolumns=1000)
writeLines(unlist(lapply(prova[1:10], paste, collapse=" ")))
prova[1]
prova[[1]]
prova[2]
writeLines(unlist(lapply(prova[2], paste, collapse=" ")))
prova[200]
writeLines(unlist(lapply(prova[200], paste, collapse=" ")))
cat(prova[200])
cat(unlist(prova[200]))
prova[100]
prova[11]
get("prova")[100:200]
cat(unlist(prova$"19"))
writeLines(cat( ,unlist(lapply(prova$"19", paste, collapse=" "))))
writeLines(unlist(lapply(prova$"19", paste, collapse=" ")))
unlist(lapply(prova$"19", paste, collapse=" "))
writeLines(unlist(lapply(prova$"19", paste, collapse=",")))
writeLines(unlist(lapply(prova$"19", paste, collapse="","")))
writeLines(unlist(lapply(prova$"19", paste, collapse="\",\"")))
writeLines(unlist(lapply(prova$"19", paste, collapse="/")))
writeLines(unlist(lapply(prova[1:10], paste, collapse="/")))
writeLines(unlist(lapply(prova[1:100], paste, collapse="/")))
writeLines(unlist(lapply(prova[1:100], paste, collapse=" ")))
names(prova)
sapply(names(mylist),function(x) paste(x,paste(mylist[[x]],collapse=" ")))
sapply(names(prova[1:100]),function(x) paste(x,paste(mylist[[x]],collapse=" ")))
sapply(names(prova[1:100]),function(x) paste(x,paste(prova[1:100][[x]],collapse=" ")))
test <- prova[1:100]
sapply(names(test),function(x) paste(x,paste(test[[x]],collapse=" ")))
fnlist <- function(x)
{
z <- deparse(substitute(x))
cat(z, "\n")
nams=names(x)
for (i in seq_along(x) ) cat(nams[i],  x[[i]], "\n")
}
fnlist(test)
sapply(names(test),function(x) paste(x,paste(test[[x]],collapse=" ")))
sapply(names(test),function(x) paste(x,paste(test[[x]],collapse="\")))
)
);
))
""
"
sapply(names(test),function(x) paste(x,paste(test[[x]],collapse=" "), collapse = " "))
sapply(names(prova),function(x) paste(x,paste(prova[[x]],collapse=" "), collapse = " "))
length(data$value[data$type == "DATE"])
info.date <- info(data$value[data$type == "DATE"])
save(info.date, "espressioniDate1992.RData" )
save(info.date, file = "espressioniDate1992.RData" )
heidel_details <- read.delim("~/Scrivania/TipsterData/esiti 1987/heidel_details.txt", header=F)
View(heidel_details)
heidel_precision <- read.delim("~/Scrivania/TipsterData/esiti 1987/heidel_precision.txt", header=F)
heidel_precision <- read.delim("~/Scrivania/TipsterData/esiti 1987/heidel_datePrecision.txt", header=F)
colnames(heidel_details) <- c("id", "type", "value", "term", "creation")
str(heidel_precision)
colnames(heidel_precision) <- c("id", "value", "gran")
dim(heidel_details[which(heidel_details$type == "DATE"), ])
prova <- merge(heidel_details, heidel_precision)
prova <- merge(heidel_details, heidel_precision, by = "value")
prova <- merge(heidel_details, heidel_precision, all.x)
prova <- merge(heidel_details, heidel_precision, all.x = TRUE)
prova <- merge(heidel_details, heidel_precision, all.x = TRUE, all.y = FALSE)
prova <- merge(heidel_details, heidel_precision, by.x = heidel_details$value, all.x = TRUE, all.y = FALSE)
prova <- merge(heidel_details, heidel_precision, by = heidel_details$value, all.x = TRUE, all.y = FALSE)
prova <- merge(heidel_details, heidel_precision, by = "value", all.x = TRUE, all.y = FALSE)
prova <- merge(heidel_details, heidel_precision, by = "value")
prova <- merge(heidel_details, heidel_precision, by = c("id", "value"))
str(prova)
dim(heidel_details)[2]
dim(heidel_details)[1] + dim(heidel_precision)[1]
str(heidel_precision)
levels(heidel_precision$value)
levels(heidel_details$value)
levels(heidel_details$value[which(heidel_details$type == "DATE")])
length(levels(heidel_precision$value))
length(levels(heidel_details$value[which(heidel_details$type == "DATE")]))
d <- heidel_details[which(heidel_details$type == "DATE"), ]
length(levels(d$value))
length(levels(heidel_precision$value))
levels(heidel_precision$value)
length(levels(d$value))
levels(d$value)
d <- droplevels(d)
length(levels(d$value))
levels(heidel_precision$value)
length(levels(heidel_precision$value))
prova <- merge(heidel_details, heidel_precision, by = "value" )
prova <- merge( heidel_precision, heidel_details,by = "value" )
prova <- merge( heidel_precision, heidel_details,by.x = "value", by.y = "value" )
prova <- merge( heidel_details, heidel_precision,by.x = "value", by.y = "value" )
rm(prova)
prova <- merge( heidel_details, heidel_precision,by.x = "value", by.y = "value" )
length(heidel_precision$value)
prova <- merge( heidel_details, heidel_precision, by = value)
prova <- merge( heidel_details, heidel_precision, by = "value")
prova <- merge( heidel_details, heidel_precision, all.x = TRUE)
head(prova)
prova$gran
heidel.dp <- read.table("~/Scrivania/TipsterData/esiti 1989/heidel_details&precision",
header=T, quote="\"")
hei <- read.table("~/Scrivania/TipsterData/esiti 1989/heidel_details",
header=T, quote="\"")
hei <- read.table("~/Scrivania/TipsterData/esiti 1989/heidel_details",
header=F, quote="\"")
hei <- read.table("~/Scrivania/TipsterData/esiti 1989/heidel_details.txt",
header=F, quote="\"")
hei <- read.delim("~/Scrivania/TipsterData/esiti 1989/heidel_details.txt",
header=F)
prova <- merge( heidel_details, heidel_precision, all.x = TRUE, by = c("value", "id"))
prova <- merge( heidel_details, heidel_precision, all = TRUE, by = c("value", "id"))
cbind(levels(d$value), length(levels(heidel_precision$value)))
cbind(levels(d$value), levels(heidel_precision$value))
prova <- merge( heidel_details, heidel_precision, all.x = TRUE, all.y = FALSE, by = c("value", "id"))
prova[100:200, ]
bo <- cbind(d, heidel_precision)
str(bo)
bo[1:10, ]
bo[1:100, ]
prova <- cbind(d, heidel_precision)
prova[1:100, ]
tiprego <- merge(heidel_details, prova, all.x = T)
notd <- heidel_details[which(heidel_details$type != "DATE"), ]
notd <- droplevels(notd)
str(prova)
prova$value
str(prova$value)
prova$value <- NULL
str(prova)
prova$id <- NULL
str(prova)
prova <- cbind(d, heidel_precision$gran)
str(prova)
names(prova)
colnames(prova) <- c("id", "type", "value", "term", "creation")
str(prova)
colnames(prova) <- c("id", "type", "value", "term", "creation", "gran")
tiprego <- rbind(d, notd)
str(tiprego)
notd$gran <-NA
notd$gran
tiprego <- rbind(d, notd)
str(notd)
tiprego <- rbind(d, notd)
str(prova)
notd$gran <-as.factor(NA)
tiprego <- rbind(d, notd)
str(prova)
str(notd)
notd <- droplevels(notd)
notd <- heidel_details[which(heidel_details$type != "DATE"), ]
notd <- droplevels(notd)
notd$gran
notd$gran <- factor("")
str(notd)
tiprego <- rbind(d, notd)
notd <- droplevels(notd)
notd <- heidel_details[which(heidel_details$type != "DATE"), ]
notd <- droplevels(notd)
tiprego <- rbind(d, notd)
str(tiprego)
prova <- cbind(heidel_details, heidel_precision$gran)
prova <- cbind(d, heidel_precision$gran)
notd$gran <- factor(NA)
notd <- heidel_details[which(heidel_details$type != "DATE"), ]
notd <- droplevels(notd)
notd$gran <- factor(NA)
str(notd)
tiprego <- rbind(prova, notd)
str(prova)
colnames(prova) <- c("id", "type", "value", "term", "creation", "gran")
tiprego <- rbind(prova, notd)
str(tiprego)
level(tipreg$gran)
levels(tipreg$gran)
levels(tiprego$gran)
notd <- heidel_details[which(heidel_details$type != "DATE"), ]
notd <- droplevels(notd)
notd$gran <- NA
tiprego <- rbind(prova, notd)
str(tiprego)
levels(tiprego$gran)
tiprego$gran
tiprego$gran[-c(1:9000)]
unique(tiprego$gran)
d <- heidel_details[which(heidel_details$type == "DATE"), ]
notd <- heidel_details[which(heidel_details$type != "DATE"), ]
notd$gran <- NA
prova <- cbind(d, heidel_precision$gran)
colnames(prova) <- c("id", "type", "value", "term", "creation", "gran")
str(prova)
str(notd)
tiprego <- rbind(prova, notd)
str(tiprego)
levels(tiprego$gran)
names(tiprego$gran)
levels(tiprego$gran) <- c(levels(tiprego$gran, "NA"))
levels(tiprego$gran) <- c(levels(tiprego$gran, "todef"))
levels(tiprego$gran) <- c(levels(tiprego$gran), "todef")
levels(tiprego$gran)
unique(tiprego$gran)
tiprego[which(tiprego$gran == "undefined" ), ]
tiprego[which(tiprego$gran == "undefined")[1:19], ]
tiprego[which(tiprego$gran == "NA")[1:19], ]
tiprego[which(tiprego$gran == <NA>)[1:19], ]
tiprego[which(is.na(tiprego$gran))[1:19], ]
tiprego$gran[which(is.na(tiprego$gran))]
tiprego$gran[which(is.na(tiprego$gran))] <- "todef"
tiprego$gran[which(tiprego$gran == "todef")]
tiprego[which(tiprego$gran == "todef")[1:14], ]
heidel_details <- read.delim("~/Scrivania/TipsterData/esiti tutti/heidel_details.txt", header=F)
heidel_precision <- read.delim("~/Scrivania/TipsterData/esiti tutti/heidel_datePrecision.txt", header=F)
colnames(heidel_details) <- c("id", "type", "value", "term", "creation")
colnames(heidel_precision) <- c("id", "value", "gran")
#---- check dimensioni ----#
length(levels(heidel_precision$value))
d <- heidel_details[which(heidel_details$type == "DATE"), ]
length(unique(d$value))
#--------------------------#
notd <- heidel_details[which(heidel_details$type != "DATE"), ]
notd$gran <- NA
tmp <- cbind(d, heidel_precision$gran)
colnames(tmp) <- c("id", "type", "value", "term", "creation", "gran")
str(tmp)
str(notd)
heidel <- rbind(tmp, notd)
str(heidel)
heidel$gran[which(is.na(heidel$gran))] <- "undefined"
#check
heidel[which((heidel$gran =="undefined")&(heidel$type != "DATE"))[1:100], ]
write.table(heidel, file = "heidel_date&precision.txt")
hiedel <- heidel[order(heidel$id)]
heidel <- heidel[order(heidel$id), ]
heidel[1:100, ]
write.table(heidel, file = "heidel_date&precision.txt")
rm(list = ls())
setwd("/home/altracartella/IR_Rstuff/")
setwd("~/altracartella/IR_Rstuff")
data <- read.delim("heidel_date&precision(tutti).txt", header=T)
colnames(data) <- c("id", "type", "value", "term", "creation")
colnames(data) <- c("id", "type", "value", "term", "creation", "gran")
str(data)
data <- read.table("esiti tutti/heidel_details.txt", header=T)
data <- read.dataframe("heidel_date&precision(tutti).txt", header=T)
data <- read.table("heidel_date&precision(tutti).txt", header=T)
str(data)
data[which(data$type == "TIME"), ]
levels(data$gran)[which(data$type == "TIME")]
data$gran[which(data$type == "TIME")]
data$gran[which(data$type == "TIME")]<- "time"
levels(data$gran) <- c(levels(data$gran), "time")
data$gran[which(data$type == "TIME")]<- "time"
data[which(data$type == "TIME")[1:10], ]
library(lubridate)
day <- ymd(data$value)
length(which(!is.na(day)))
length(which(data$gran =="day") )
daybase <- as.Date(data$value)
str(daybase)
length(which(!is.na(daybase)))
data[which((data$type == "DATE")&(data$gran == "year"))[1:10], ]
data[which((data$type == "DATE")&(data$gran == "year")), ]
anni <-data[which((data$type == "DATE")&(data$gran == "year")), ]
str(anni)
anni <- droplevels(anni)
str(anni)
levels(anni$value)
info <- function(data.temp)
{
t.espr <- levels(data.temp)
out <- list(list())
for(i in 1:length(t.espr))
{
freq <- dim(data[which(data.temp == t.espr[i]), ])[1]
terms <- unique(as.character(data$term[which(data.temp == t.espr[i])]))
out[[t.espr[i]]] <- list(terms = terms, freq = freq)
}
out
}
source("~/altracartella/IR_Rstuff/TipsterFunzioni.R")
source("~/altracartella/IR_Rstuff/TipsterFunzioni.R")
rm(data.temp)
anni.info <- info(anni$value)
anni.info
str(anni.info)
length(anni.info)
for(i in 1:length(anni.info))
{
cat(paste(names(anni.info[i]), anni.info[i]$freq), sep = ""))
}
for(i in 1:length(anni.info))
{
cat(paste(names(anni.info[i]), anni.info[i]$freq), sep = ""))
}
for(i in 1:length(anni.info))
{
cat(paste(names(anni.info[i]), anni.info[i]$freq, sep = ""))
}
for(i in 1:length(anni.info))
{
cat(paste(names(anni.info[i]), anni.info[i]$freq, sep = " "))
}
for(i in 1:length(anni.info))
{
cat(paste(names(anni.info[i]), anni.info[i]$freq, sep = "\ "))
}
cat(anni.info[i]$freq)
for(i in 1:length(anni.info))
{
# cat(paste(names(anni.info[i]), anni.info[i]$freq, sep = " "))
cat(anni.info[i]$freq)
}
for(i in 1:length(anni.info))
{
# cat(paste(names(anni.info[i]), anni.info[i]$freq, sep = " "))
print(anni.info[i]$freq)
}
print(anni.info[[i]$freq)
for(i in 1:length(anni.info))
{
# cat(paste(names(anni.info[i]), anni.info[i]$freq, sep = " "))
print(anni.info[[i]$freq)
}
for(i in 1:length(anni.info))
{
# cat(paste(names(anni.info[i]), anni.info[i]$freq, sep = " "))
print(anni.info[[i]$freq)
}
for(i in 1:length(anni.info))
{
# cat(paste(names(anni.info[i]), anni.info[i]$freq, sep = " "))
print(anni.info[[i]]$freq)
}
for(i in 1:length(anni.info))
{
# cat(paste(names(anni.info[i]), anni.info[i]$freq, sep = " "))
print(paste(names(anni.info[i]) , anni.info[[i]]$freq))
}
anni.info$"028"
anni.info$"2028"
anni.info["2028"]
anni.info["1973"]
info <- function(data.temp, data)
{
t.espr <- levels(data.temp)
out <- list(list())
for(i in 1:length(t.espr))
{
freq <- dim(data[which(data.temp == t.espr[i]), ])[1]
terms <- unique(as.character(data$term[which(data.temp == t.espr[i])]))
out[[t.espr[i]]] <- list(terms = terms, freq = freq)
}
out
}
26.3*8
